{
  "swagger": "2.0",
  "info": {
    "title": "Alphaus: Blue API",
    "version": "v0.beta",
    "contact": {
      "name": "Alphaus: Blue API",
      "url": "https://alphauslabs.github.io/blueapi/"
    },
    "license": {
      "name": "License: Apache License 2.0",
      "url": "https://github.com/alphauslabs/blueapi/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Organization",
      "description": "Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/org/"
      }
    },
    {
      "name": "Iam",
      "description": "Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/iam/"
      }
    },
    {
      "name": "Cost",
      "description": "Base URL: https://api.alphaus.cloud/m/blue/cost",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/cost/"
      }
    },
    {
      "name": "Billing",
      "description": "Base URL: https://api.alphaus.cloud/m/blue/billing",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/billing/"
      }
    },
    {
      "name": "Operations",
      "description": "Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/operations/"
      }
    },
    {
      "name": "Preferences",
      "description": "Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Service definition",
        "url": "https://github.com/alphauslabs/blueapi/tree/main/preferences/"
      }
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/iam/v1/apiclients": {
      "get": {
        "summary": "Lists all API clients belonging to the caller.",
        "operationId": "Iam_ListApiClients",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiApiClient"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiApiClient"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates an API client for the caller.",
        "operationId": "Iam_CreateApiClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApiClient"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateApiClientRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/apiclients/{id}": {
      "delete": {
        "summary": "Deletes an API client belonging to the caller.",
        "operationId": "Iam_DeleteApiClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The client id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/ipfilters": {
      "get": {
        "summary": "Lists all IP filters. At the moment, this API is only available for root users.",
        "operationId": "Iam_ListIpFilters",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1IpFilter"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1IpFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates an IP filter item for IP blacklisting or whitelisting. At the moment,\nthis API is only available for root users.",
        "operationId": "Iam_CreateIpFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IpFilter"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateIpFilterRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/ipfilters/{id}": {
      "delete": {
        "summary": "Deletes an IP filter item. At the moment, this API is only available for root users.",
        "operationId": "Iam_DeleteIpFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The IP filter id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/permissions": {
      "get": {
        "summary": "Lists currently supported permissions.",
        "operationId": "Iam_ListPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/users": {
      "get": {
        "summary": "Lists all subusers.",
        "operationId": "Iam_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiUser"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      },
      "post": {
        "summary": "Creates a subuser.",
        "operationId": "Iam_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateUserRequest"
            }
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/users/{id}": {
      "get": {
        "summary": "Gets subuser information. This call includes all of the subuser metadata. See\n[https://alphauslabs.github.io/blueapi/] for the list of supported attributes.\nIf the `{name}` parameter is `me` or `-`, returns the caller information, which\nis equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.",
        "operationId": "Iam_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      },
      "delete": {
        "summary": "Deletes a subuser.",
        "operationId": "Iam_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required. The subuser name to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/whoami": {
      "get": {
        "summary": "Gets user information about the caller. This call includes all of the user metadata.\nSee [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.",
        "operationId": "Iam_WhoAmI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      }
    },
    "/ops/v1": {
      "get": {
        "summary": "Lists long-running operations.",
        "operationId": "Operations_ListOperations",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/blueapiapiOperation"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Optional. The name of the operation's parent resource. Not used at the moment.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/ops/v1/{name}": {
      "get": {
        "summary": "Gets the latest state of a long-running operation. You can use this method to\npoll the operation result at intervals.",
        "operationId": "Operations_GetOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Deletes a long-running operation. This method indicates that the client is no\nlonger interested in the operation result. It does not cancel the operation.",
        "operationId": "Operations_DeleteOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/ops/v1/{name}:cancel": {
      "post": {
        "summary": "Starts asynchronous cancellation on a long-running operation. The server makes\na best effort to cancel the operation, but success is not guaranteed. On successful\ncancellation, the operation is not deleted; instead, it becomes an operation with\na value of [google.rpc.Status.code][google.rpc.Status.code] 1, corresponding\nto `Code.CANCELLED`.",
        "operationId": "Operations_CancelOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to be cancelled.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Request message for the Operations.CancelOperation rpc."
            }
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/org/v1": {
      "get": {
        "summary": "Gets information about the caller's organization.",
        "operationId": "Organization_GetOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "summary": "Deletes the organization.",
        "operationId": "Organization_DeleteOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Creates the organization account.",
        "operationId": "Organization_CreateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrgRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/metadata": {
      "put": {
        "summary": "Updates organization metadata. See [https://alphauslabs.github.io/blueapi/]\nfor the list of supported attributes.",
        "operationId": "Organization_UpdateMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMetadataRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/passwd": {
      "put": {
        "summary": "Updates the organization password.",
        "operationId": "Organization_UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1:sendVerification": {
      "post": {
        "summary": "Sends (or resends) the verification email. Only valid for unverified\norganizations. The verification key will be valid for a day.",
        "operationId": "Organization_SendVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1:verify": {
      "post": {
        "summary": "Verifies an organization using the key received from the verification email.\nThe verification key is only valid for a day.",
        "operationId": "Organization_VerifyOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyOrgRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/prefs/v1": {
      "get": {
        "summary": "Gets current preferences.",
        "operationId": "Preferences_GetPreferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Preference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Preferences"
        ]
      }
    },
    "/v1/aws:importCurFiles": {
      "post": {
        "summary": "Initiates an ondemand import of all registered CUR files. See\n[https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting]\nfor more information.",
        "operationId": "Cost_ImportCurFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportCurFilesRequest"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/billinggroups": {
      "get": {
        "summary": "Lists all billing groups.",
        "operationId": "Billing_ListBillingGroups",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1BillingGroup"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1BillingGroup"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Billing"
        ]
      }
    },
    "/v1/{vendor}/accounts": {
      "get": {
        "summary": "Lists all vendor accounts.",
        "operationId": "Cost_ListAccounts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiAccount"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "post": {
        "summary": "Registers a vendor account.",
        "operationId": "Cost_CreateAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Required. The account id to register."
                },
                "name": {
                  "type": "string",
                  "description": "Optional. If empty, set to the value of `id`."
                },
                "parent": {
                  "type": "string",
                  "description": "Optional. The parent `billingInternalId` of the billing group to which this account\nwill belong to."
                },
                "awsOptions": {
                  "$ref": "#/definitions/v1CreateAccountRequestAwsOptions",
                  "description": "Required for the `aws` vendor. AWS-specific options."
                }
              },
              "description": "Request message for the Cost.CreateAccount rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/accounts/{id}": {
      "get": {
        "summary": "Gets a vendor account. This API includes all of the account's metadata. See\nhttps://alphauslabs.github.io/blueapi/ for the list of supported attributes.",
        "operationId": "Cost_GetAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The account id to retrieve.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "delete": {
        "summary": "Deletes a vendor account.",
        "operationId": "Cost_DeleteAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The account id to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/adjustments:read": {
      "post": {
        "summary": "Reads the non-usage-based details of an organization (Ripple) or billing group (Wave).\nThis API covers non-usage-based adjustments, such as Fees, Credits, Discounts, Tax,\nUpfront Fees, etc. At the moment, the supported {vendor} is 'aws'. If datetime\nrange parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadAdjustments",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1AdjustmentItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1AdjustmentItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "billingInternalId": {
                  "type": "string",
                  "description": "Optional. If set, reads the non-usage-based adjustment details of this billing group.\nValid only if `accountId` is not set. If both `billingInternalId` and `accountId` are\nnot set, reads the adjustment details of the whole organization. Only valid for\nRipple users. Implied (or discarded) for Wave(Pro) users."
                },
                "accountId": {
                  "type": "string",
                  "description": "Optional. If set, reads the non-usaged-based adjustment details of this account. Also\ninvalidates the `billingInternalId` value even if set. If both `billingInternalId`\nand `accountId` are not set, reads the adjustment details of the whole organization."
                },
                "startTime": {
                  "type": "string",
                  "description": "Optional. The UTC date to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: `yyyymmdd`."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. The UTC date to end the streaming data. If not set, current date will be\nused. Format: `yyyymmdd`."
                },
                "awsOptions": {
                  "$ref": "#/definitions/v1ReadAdjustmentsRequestAwsOptions",
                  "description": "Optional. Valid only for the `aws` vendor. AWS-specific options."
                }
              },
              "description": "Request message for the Cost.ReadAdjustments rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/billinggroups/{id}/nontagcosts:read": {
      "post": {
        "summary": "(Deprecated, use cost.ReadNonTagCosts instead) Reads the usage-based non tag costs of a billing group.\nAt the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date \n(current month) will be returned.",
        "operationId": "Cost_ReadBillingGroupNonTagCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The company id to stream.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/billinggroups/{id}/tagcosts:read": {
      "post": {
        "summary": "(Deprecated, use cost.ReadTagCosts instead) Reads the usage-based tag costs of a billing group. \nAt the moment, the supported {vendor} is 'aws'. If datetime range parameters are not set, month-to-date \n(current month) will be returned.",
        "operationId": "Cost_ReadBillingGroupTagCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The company id to stream.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/budgets/configuration": {
      "get": {
        "summary": "Fetches budget configurations for all accounts under the specified billing group.\nSet accountId to fetch budget configuration for specific account only.",
        "operationId": "Cost_GetBudgetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBudgetConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are `aws`, `azure`, and `gcp`.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "billingGroupId",
            "description": "Required. Billing group id to retrieve.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "description": "Optional. If set, only budget configuration for the specified account is returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "post": {
        "summary": "Creates a budget configuration.",
        "operationId": "Cost_CreateBudgetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. Budget configuration to save.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiBudgetConfiguration"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/budgets/configuration/{budgetConfigId}": {
      "put": {
        "summary": "Updates an existing budget configuration.",
        "operationId": "Cost_UpdateBudgetConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "budgetConfigId",
            "description": "Required. Budget configuration id to update.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. Budget configuration with update information.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiBudgetConfiguration"
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/calculator": {
      "get": {
        "summary": "Gets the vendor cost calculator's current configuration.",
        "operationId": "Cost_GetCalculatorConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCalculatorConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/costs:calculate": {
      "post": {
        "summary": "Triggers monthly calculations for costs and invoices at either organization or billing group level.",
        "operationId": "Cost_CalculateCosts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/blueapiapiOperation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "billingInternalId": {
                  "type": "string",
                  "description": "Optional. If set to a particular billing group, calculate for that billing group.\nIf empty, calculate for all billing groups.\n\nAt the moment, for AWS, this is only valid for account type billing groups, not\ntag billing groups. If a tag billing group is provided, it is discarded and the\ncalculation is done for the whole organization."
                },
                "month": {
                  "type": "string",
                  "description": "Optional. The UTC month to calculate. If empty, it defaults to the previous month.\nFormat is `yyyymm`. For example, June 2021 will be `202106`."
                }
              },
              "description": "Request message for the Cost.CalculateCosts rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/costs:read": {
      "post": {
        "summary": "Reads the usage-based cost details of an organization (Ripple) or billing group (Wave).\nAt the moment, the supported {vendor} is 'aws'. If datetime range parameters are\nnot set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "billingInternalId": {
                  "type": "string",
                  "description": "Optional. If set, reads the usage-based cost details of this billing group. Valid\nonly if `accountId` is not set. If both `billingInternalId` and `accountId` are\nnot set, reads the usage-based cost details of the whole organization. Only valid\nfor Ripple users. Implied (or discarded) for Wave(Pro) users."
                },
                "accountId": {
                  "type": "string",
                  "description": "Optional. If set, reads the usage-based cost details of this account. Also invalidates\nthe `billingInternalId` value even if set. If both `billingInternalId` and `accountId`\nare not set, reads the usage-based cost details of the whole organization."
                },
                "startTime": {
                  "type": "string",
                  "description": "Optional. The UTC date to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. The UTC date to end the streaming data. If not set, current date will be\nused. Format: `yyyymmd`."
                },
                "awsOptions": {
                  "$ref": "#/definitions/v1ReadCostsRequestAwsOptions",
                  "description": "Optional. Valid only for the `aws` vendor. AWS-specific options."
                }
              },
              "description": "Request message for the Cost.ReadCosts rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/forecasts": {
      "get": {
        "summary": "Fetches cost forecasts for the specified billing group.\nIncludes historical cost (up to previous month) and forecasted cost (up to three months for now).",
        "operationId": "Cost_GetForecasts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetForecastsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "description": "Optional. Company Id of Billing Group to retrieve.\nDefault value is user's Company Id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "frequency",
            "description": "Optional. Forecast frequency. Valid values are `daily` and `monthly`. \nDefault value is `daily`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "level",
            "description": "Optional. Forecast granularity. Valid values are `account`, `category` and `product`.\nDefault value is `account`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDate",
            "description": "Optional. Starting date to get data.\nIf from_date is less than current date, historical costs are included.\nIf from_date is greater than current date, only forecasted costs are returned.\nFormat: `yyyy-mm-dd`.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "description": "Optional. Last date to get forecast cost. \nCurrently, we only support 90 days forecasting from the first day of current month.\nFormat: `yyyy-mm-dd`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/forecasts/month-to-date": {
      "get": {
        "summary": "Fetches month-to-date accumulated costs vs forecasted cost vs budget for the specified billing group.",
        "operationId": "Cost_GetMonthToDateForecast",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMonthToDateForecastResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "description": "Optional. Company Id of Billing Group to retrieve.\nDefault value is user's Company Id.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/nontagcosts:read": {
      "post": {
        "summary": "Reads the usage-based non tag costs of a billing group. At the moment, the supported {vendor} is \n'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadNonTagCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "billingInternalId": {
                  "type": "string",
                  "description": "Required. The billing internal id to stream."
                },
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: `yyyymmdd`."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: `yyyymmdd`."
                }
              },
              "description": "Request message for the Cost.ReadNonTagCosts rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/payers": {
      "get": {
        "summary": "Lists vendor payer accounts. For AWS, these are management accounts (formerly known\nas master or payer accounts); for Azure, these are subscriptions, for GCP, these\nare projects.",
        "operationId": "Cost_ListPayerAccounts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/apiAccount"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "post": {
        "summary": "Registers a vendor payer account.",
        "operationId": "Cost_CreatePayerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "awsOptions": {
                  "$ref": "#/definitions/v1CreatePayerAccountRequestAwsOptions",
                  "description": "Required for the `aws` vendor. AWS-specific options."
                }
              },
              "description": "Request message for the Cost.CreatePayerAccount rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/payers/{id}": {
      "get": {
        "summary": "Gets a vendor payer account. This API includes all of the account's metadata.\nSee https://alphauslabs.github.io/blueapi/ for the list of supported attributes.\nFor AWS, this means a management account (formerly known as master or payer account);\nfor Azure, this means a subscription, for GCP, this means a project.",
        "operationId": "Cost_GetPayerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The id of the account to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      },
      "delete": {
        "summary": "Deletes a vendor payer account.",
        "operationId": "Cost_DeletePayerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The id of the account.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/payers/{id}/importhistory": {
      "get": {
        "summary": "Gets a payer account's import history, which is a list of timestamps our system tracks when the account's data are\nimported to our system, which in turn, triggers processing. At the moment, this only supports AWS (CUR files).",
        "operationId": "Cost_GetPayerAccountImportHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPayerAccountImportHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Required. The account id to query.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "month",
            "description": "Optional. The UTC month to query. If empty, defaults to current month.\nFormat is `yyyymm`. For example, June 2021 will be `202106`.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/tagcosts:read": {
      "post": {
        "summary": "Reads the usage-based tag costs of a billing group. At the moment, the supported {vendor} is \n'aws'. If datetime range parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadTagCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. At the moment, only `aws` is supported.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "billingInternalId": {
                  "type": "string",
                  "description": "Required. The billing internal id to stream."
                },
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: `yyyymmdd`."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: `yyyymmdd`."
                }
              },
              "description": "Request message for the Cost.ReadTagCosts rpc."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    }
  },
  "definitions": {
    "apiAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The account id."
        },
        "name": {
          "type": "string",
          "description": "The account name."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "The attributes (key/value pair) of the account. At the moment,\nthis maps to `AccountMetadataV1`."
        }
      }
    },
    "apiApiClient": {
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string",
          "description": "API client id."
        },
        "clientSecret": {
          "type": "string",
          "description": "API client secret. Only available during creation; otherwise, redacted."
        },
        "name": {
          "type": "string",
          "description": "API client name."
        },
        "grantType": {
          "type": "string",
          "description": "Grant type. Always set to `client_credentials`."
        },
        "parent": {
          "type": "string",
          "description": "The client's parent resource."
        },
        "createTime": {
          "type": "string"
        }
      }
    },
    "apiBillingGroupForecast": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiForecastData"
          }
        }
      }
    },
    "apiBillingGroupMonthToDateForecast": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiMonthToDateForecastData"
          }
        }
      }
    },
    "apiBudgetAlert": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "budgetConfigurationId": {
          "type": "string"
        },
        "percentage": {
          "type": "integer",
          "format": "int32"
        },
        "channelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiBudgetConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "length": {
          "type": "string"
        },
        "startingMonth": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "monthBudget": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "alertsEnabled": {
          "type": "boolean"
        },
        "budgetAlerts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiBudgetAlert"
          }
        }
      }
    },
    "apiForecastData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "productCategory": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "frequency": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "historicalCost": {
          "type": "number",
          "format": "double"
        },
        "forecastedCost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiMonthToDateForecastData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "productCategory": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "accumulatedCost": {
          "type": "number",
          "format": "double"
        },
        "forecastCost": {
          "type": "number",
          "format": "double"
        },
        "budget": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "apiPermission": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPolicy"
          }
        }
      }
    },
    "apiPolicy": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "effect": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "User's unique id."
        },
        "parent": {
          "type": "string",
          "description": "The user's parent. If empty or non-existent, it means this user is a root user;\notherwise, it's a subuser."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The attributes (key/value pair) of the user. If hierarchy is supported, it will be\nseparated by '/', such as 'key/subkey=value'. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes."
        }
      }
    },
    "awsAdjustment": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "billingGroupId": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "baseCurrency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "number",
          "format": "double"
        },
        "targetCost": {
          "type": "number",
          "format": "double"
        },
        "targetCurrency": {
          "type": "string"
        }
      }
    },
    "awsCalculatorConfig": {
      "type": "object"
    },
    "awsCost": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "billingGroupId": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "serviceCode": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "usageType": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "costCategories": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "usage": {
          "type": "number",
          "format": "double"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "baseCurrency": {
          "type": "string"
        },
        "exchangeRate": {
          "type": "number",
          "format": "double"
        },
        "targetCost": {
          "type": "number",
          "format": "double"
        },
        "targetCurrency": {
          "type": "string"
        },
        "tagId": {
          "type": "string"
        }
      }
    },
    "blueapiapiOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation. It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata. Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success. If the original method returns\nno data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the\noriginal method is standard `Get`/`Create`/`Update`, the response should be the\nresource. For other methods, the response should have the type `XxxResponse`, where\n`Xxx` is the original method name. For example, if the original method name is\n`TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rippleOrg": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name (or id) of the organization."
        },
        "email": {
          "type": "string",
          "description": "The registered email of the organization."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The metadata (key/value pair) of the organization. If hierarchy is supported, it will be\nseparated by '/', such as 'metakey/subkey=value'. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes."
        }
      },
      "description": "Org resource definition."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1AdjustmentItem": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsAdjustment"
        }
      },
      "description": "Response message wrapper for cloud cost adjustments."
    },
    "v1BillingGroup": {
      "type": "object",
      "properties": {
        "billingInternalId": {
          "type": "string",
          "description": "The billing group's internal id."
        },
        "billingGroupId": {
          "type": "string",
          "description": "The billing group id."
        },
        "billingGroupName": {
          "type": "string",
          "description": "The billing group name."
        }
      }
    },
    "v1CostItem": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsCost"
        }
      },
      "description": "Response message wrapper for cloud costs."
    },
    "v1CreateAccountRequestAwsOptions": {
      "type": "object",
      "properties": {
        "managementAccountId": {
          "type": "string",
          "description": "Optional. The management account id (formerly known as master, or payer) to\nwhich an account belongs to, initially. If the account is moved to another\nmanagement account, the system is able to detect it and set this value\naccordingly."
        }
      },
      "description": "AWS-specific options for registering an account."
    },
    "v1CreateApiClientRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. The descriptive name of the API client to create."
        }
      },
      "description": "Request message for the Iam.CreateApiClient rpc."
    },
    "v1CreateIpFilterRequest": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Required. The IP input to filter, either blacklist or whitelist. Should be in\nCIDR format (i.e. 1.2.3.4/32)."
        },
        "type": {
          "type": "string",
          "description": "Optional. Can be `whitelist` or `blacklist`. Defaults to `blacklist` if empty."
        },
        "rootUser": {
          "type": "string",
          "description": "Optional. If valid rootUser and subUser is empty, filter is for this rootuser.\nIf both rootUser and subUser inputs are empty, filter is at global scope."
        },
        "subUser": {
          "type": "string",
          "description": "Optional. If valid subuser, filter is for this subuser; rootUser value is discarded.\nIf both rootUser and subUser inputs are empty, filter is at global scope."
        }
      },
      "description": "Request message for the Iam.CreateIpFilter rpc."
    },
    "v1CreateOrgRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Required. Organization's email"
        },
        "description": {
          "type": "string",
          "title": "Required. Organization's description or company name"
        },
        "password": {
          "type": "string",
          "description": "Optional. User can decide to let the system generates the password."
        }
      },
      "description": "Request message for the Organization.CreateOrg rpc."
    },
    "v1CreateOrgResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/rippleOrg"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "Response message for the Organization.CreateOrg rpc."
    },
    "v1CreatePayerAccountRequestAwsOptions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Required. The id of the management account."
        },
        "name": {
          "type": "string",
          "description": "Optional. The name, or description of the management account.\nThis is set to `id` when not specified."
        },
        "bucketName": {
          "type": "string",
          "description": "Required. S3 Bucket name."
        },
        "prefix": {
          "type": "string",
          "description": "Optional. Prefix."
        },
        "reportName": {
          "type": "string",
          "description": "Required. Report name."
        },
        "roleArn": {
          "type": "string",
          "description": "Required. Role ARN for Alphaus to assume for access."
        }
      },
      "description": "See [https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting]\nfor more information.\nSee [https://docs.aws.amazon.com/cur/latest/userguide/cur-create.html] for more information.\nRequirements include: Additional report details = 'Include Resource IDS' enabled,\nPrefix = non-empty (recommendation only), Time granularity = 'Hourly', File format = 'text/csv'."
    },
    "v1CreateUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Min: 4, max: 18, allowed characters: letters, numbers, `_` (underscore),\n`.` (period) and `-` (hyphen) characters."
        },
        "password": {
          "type": "string",
          "description": "Required. Minimum of 8 characters."
        },
        "email": {
          "type": "string",
          "description": "Optional. Email address of the subuser."
        },
        "nickName": {
          "type": "string",
          "description": "Optional. Nickname or description. It is set to 'name' if empty."
        }
      },
      "description": "Request message for the Iam.CreateUser rpc."
    },
    "v1GetBudgetConfigResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiBudgetConfiguration"
          }
        }
      },
      "description": "Response message for GetBudgetConfig.\nIf accountId is specified in the request, only one budget configuration is returned."
    },
    "v1GetCalculatorConfigResponse": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsCalculatorConfig"
        }
      },
      "description": "Response message for the Cost.GetCalculatorConfig rpc."
    },
    "v1GetForecastsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/apiBillingGroupForecast"
        }
      },
      "description": "Response message for GetForecasts per billing group."
    },
    "v1GetMonthToDateForecastResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/apiBillingGroupMonthToDateForecast"
        }
      },
      "description": "Response message for GetMonthToDateForecast per billing group."
    },
    "v1GetPayerAccountImportHistoryResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The queried account id."
        },
        "month": {
          "type": "string",
          "description": "The queried UTC month."
        },
        "timestamps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of timestamps in RFC3339 format with the `T` separator.\nExample: `2019-10-12T07:20:50.52Z`"
        }
      },
      "description": "Response message for the Cost.GetPayerAccountImportHistory rpc."
    },
    "v1ImportCurFilesRequest": {
      "type": "object",
      "properties": {
        "month": {
          "type": "string",
          "description": "Optional. The UTC month to import. If empty, it defaults to the current month.\nFormat is `yyyymm`. For example, June 2021 will be `202106`."
        },
        "filter": {
          "type": "string",
          "description": "Optional. A comma-separated list of management accounts to import. If empty,\nall CURs associated with all your management accounts will be imported."
        }
      },
      "description": "Request message for the Cost.ImportCurFiles rpc."
    },
    "v1IpFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "IP filter item id. Note that this name is transcient and is not fixed. However,\nyou can use any of its permutations to endpoints that accept it, such as\nthe `DELETE:/iam/v?/ipfilters/{id}` endpoint, without issues."
        },
        "scope": {
          "type": "string",
          "description": "Can be `global`, `rootuser`, or `subuser`."
        },
        "target": {
          "type": "string",
          "description": "The target of the filter. If global scope, this is usually empty.\nRootuser name for rootuser scope, and subuser name for subuser scope.\nFor subuser targets, format is `rootuser/subuser`."
        },
        "type": {
          "type": "string",
          "description": "The type of IP filter. It could be `whitelist` or `blacklist`."
        },
        "value": {
          "type": "string",
          "description": "The IP filter value. Should be in CIDR format."
        }
      }
    },
    "v1ListPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiPermission"
          }
        }
      },
      "description": "Response message for the Iam.ListPermissions rpc."
    },
    "v1Preference": {
      "type": "object"
    },
    "v1ReadAdjustmentsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "toCurrency": {
          "type": "string",
          "description": "Optional. Set to US dollars (USD) by default (AWS CUR's default currency). You can\nset it to the desired three-letter currency symbol (i.e. JPY, EUR, GBP), in which\ncase, it will use the latest exchange rates provided by https://fixer.io. If you\nprefer a custom exchange rate, you can append the rate to the currency's three-letter\nsymbol. For example, `JPY:110.622` for the Japanese Yen. Note that the exchange rate\nshould be against the US dollar (USD)."
        }
      }
    },
    "v1ReadCostsRequestAwsOptions": {
      "type": "object",
      "properties": {
        "groupByColumns": {
          "type": "string",
          "description": "Optional. A comma-separated list of columns to aggregate the data into. Valid values\nare `productCode`, `serviceCode`, `region`, `zone`, `usageType`, `instanceType`,\n`operation`, `invoiceId`, `description`, and `resourceId`. A special value of `none`\nis also supported, which means no additional columns will be queried, which translates\nto data aggregated daily per account.\n\nFor example, if you only want the services and region data, you can set this field to\n`productCode,region`. Your input sequence doesn't matter (although the sequence above\nis recommended) as the actual sequence is already fixed in the return data (see the\ndefinition in https://github.com/alphauslabs/blueapi/blob/main/api/aws/cost.proto),\nwhich is generic to specific, top to bottom. Invalid values are discarded. Excluded\ncolumns will be empty."
        },
        "includeTags": {
          "type": "boolean",
          "description": "Optional. If set to true, stream will include resource tags. Discarded when\n`groupByColumns` field is set."
        },
        "includeCostCategories": {
          "type": "boolean",
          "description": "Optional. If set to true, stream will include resource cost category information.\nDiscarded when `groupByColumns` field is set."
        },
        "toCurrency": {
          "type": "string",
          "description": "Optional. Set to US dollars (USD) by default (AWS CUR's default currency). You can\nset it to the desired three-letter currency symbol (i.e. JPY, EUR, GBP), in which\ncase, it will use the latest exchange rates provided by https://fixer.io. If you\nprefer a custom exchange rate, you can append the rate to the currency's three-letter\nsymbol. For example, `JPY:110.622` for the Japanese Yen. Note that the exchange rate\nshould be against the US dollar (USD)."
        },
        "forceLatest": {
          "type": "boolean",
          "description": "Optional. If set to true, always get the up-to-date calculation results. This data\nisn't necessarily in-sync with your invoice data as AWS could still have updated your\nCUR files even after you created your invoices. By default, returned data are those\nthat are always in-sync with your invoices.\n\nThis field is discarded for Wave(Pro) users. You will always get the latest data that\nis in-sync with your invoices."
        }
      },
      "description": "AWS-specific options for ReadCostsRequest."
    },
    "v1UpdateMetadataRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Request message for the Organization.UpdateMetadata rpc."
    },
    "v1UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "description": "Request message for the Organization.UpdatePassword rpc."
    },
    "v1VerifyOrgRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "description": "Request message for the Organization.VerifyOrg rpc."
    }
  },
  "externalDocs": {
    "description": "Our existing, non-Blue API documentation",
    "url": "https://docs.mobingi.com/v/api-reference/"
  }
}
