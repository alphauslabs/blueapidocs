{
  "swagger": "2.0",
  "info": {
    "title": "Alphaus: Blue API",
    "version": "1.0",
    "contact": {
      "name": "Alphaus: Blue API",
      "url": "https://alphauslabs.github.io/blueapi/"
    },
    "license": {
      "name": "License: Apache License 2.0",
      "url": "https://github.com/alphauslabs/blueapi/blob/main/LICENSE"
    }
  },
  "tags": [
    {
      "name": "Organization",
      "description": "Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Find out more about Organization service",
        "url": "https://alphauslabs.github.io/blueapi/"
      }
    },
    {
      "name": "Iam",
      "description": "Base URL: https://api.alphaus.cloud/m/blue",
      "externalDocs": {
        "description": "Find out more about Iam service",
        "url": "https://alphauslabs.github.io/blueapi/"
      }
    },
    {
      "name": "Cost",
      "description": "Base URL: https://api.alphaus.cloud/m/blue/cost",
      "externalDocs": {
        "description": "Find out more about Cost service",
        "url": "https://alphauslabs.github.io/blueapi/"
      }
    },
    {
      "name": "GlobalConfig"
    },
    {
      "name": "Operations"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/iam/v1/users": {
      "get": {
        "summary": "Lists all subusers.",
        "operationId": "Iam_ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/users/{name}": {
      "get": {
        "summary": "Gets subuser information. This call includes all of the subuser metadata. See\nhttps://alphauslabs.github.io/blueapi/ for the list of supported attributes.\nIf the {name} parameter is 'me' or '-', returns the caller information, which\nis equivalent to `WhoAmI()` or `GET:/iam/v*/whoami`.",
        "operationId": "Iam_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Iam"
        ]
      }
    },
    "/iam/v1/whoami": {
      "get": {
        "summary": "Gets user information about the caller. This call includes all of the user metadata.\nSee https://alphauslabs.github.io/blueapi/ for the list of supported attributes.",
        "operationId": "Iam_WhoAmI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Iam"
        ]
      }
    },
    "/ops/v1": {
      "get": {
        "summary": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.",
        "operationId": "Operations_ListOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOperationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation's parent resource.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "The standard list filter.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The standard list page size.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "The standard list page token.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/ops/v1/{name}": {
      "get": {
        "summary": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
        "operationId": "Operations_GetOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/operationsv1Operation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      },
      "delete": {
        "summary": "Deletes a long-running operation. This method indicates that the client is\nno longer interested in the operation result. It does not cancel the\noperation. If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.",
        "operationId": "Operations_DeleteOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/ops/v1/{name}:cancel": {
      "post": {
        "summary": "Starts asynchronous cancellation on a long-running operation.  The server\nmakes a best effort to cancel the operation, but success is not\nguaranteed.  If the server doesn't support this method, it returns\n`google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n[Operations.GetOperation][google.longrunning.Operations.GetOperation] or\nother methods to check whether the cancellation succeeded or whether the\noperation completed despite cancellation. On successful cancellation,\nthe operation is not deleted; instead, it becomes an operation with\nan [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,\ncorresponding to `Code.CANCELLED`.",
        "operationId": "Operations_CancelOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The name of the operation resource to be cancelled.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The request message for Operations.CancelOperation."
            }
          }
        ],
        "tags": [
          "Operations"
        ]
      }
    },
    "/org/v1": {
      "get": {
        "summary": "Gets information about the caller's organization.",
        "operationId": "Organization_GetOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "summary": "Deletes the organization.",
        "operationId": "Organization_DeleteOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "summary": "Creates the organization account.",
        "operationId": "Organization_CreateOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOrgResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrgRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/masteraccts": {
      "get": {
        "summary": "Lists master accounts that belongs to the caller's organization.",
        "operationId": "Organization_ListMasterAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMasterAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/masteraccts/{id}": {
      "get": {
        "summary": "Get master account. This call includes all of the account's metadata. See\nhttps://alphauslabs.github.io/blueapi/ for the list of supported attributes.",
        "operationId": "Organization_GetMasterAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/awsAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/metadata": {
      "put": {
        "summary": "Updates organization metadata. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes.",
        "operationId": "Organization_UpdateMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMetadataRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1/passwd": {
      "put": {
        "summary": "Updates the organization password.",
        "operationId": "Organization_UpdatePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePasswordRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1:sendVerification": {
      "post": {
        "summary": "Sends (or resends) the verification email. Only valid for unverified\norganizations. The verification key will be valid for a day.",
        "operationId": "Organization_SendVerification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendVerificationRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/org/v1:verify": {
      "post": {
        "summary": "Verifies an organization using the key received from the verification email.\nThe verification key is only valid for a day.",
        "operationId": "Organization_VerifyOrg",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/rippleOrg"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyOrgRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/ripple/v1/config": {
      "get": {
        "operationId": "GlobalConfig_StreamReadRippleConfig",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1StreamListConfigResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1StreamListConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GlobalConfig"
        ]
      }
    },
    "/v1/{vendor}/accounts/{name}/adjustments:readAccountAdjustments": {
      "post": {
        "summary": "Reads the non-usaged-based details of an AWS account. This API covers non-usage-based\nadjustments, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range\nparameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadAccountAdjustments",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1AdjustmentItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1AdjustmentItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are 'aws', 'azure', and 'gcp'.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The AWS account id to stream.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: yyyymmdd."
                }
              },
              "description": "Request message for Cost.ReadAccountAdjustments."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/accounts/{name}/costs:readAccountCosts": {
      "post": {
        "summary": "Reads the usage-based cost details of an account. If datetime range\nparameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadAccountCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are 'aws', 'azure', and 'gcp'.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The account to stream.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: yyyymmdd."
                },
                "awsOptions": {
                  "$ref": "#/definitions/v1AwsOptions",
                  "description": "Optional. AWS-specific request options."
                }
              },
              "description": "Request message for Cost.ReadAccountCosts."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/adjustments:readAdjustments": {
      "post": {
        "summary": "Reads the non-usage-based details of an organization (Ripple) or company (Wave). This API covers\nnon-usage-based adjustments, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime\nrange parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadAdjustments",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1AdjustmentItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1AdjustmentItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are 'aws', 'azure', and 'gcp'.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: yyyymmdd."
                }
              },
              "description": "Request message for Cost.ReadAdjustments."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/billinggroups/{name}/adjustments:readBillingGroupAdjustments": {
      "post": {
        "summary": "Reads the non-usage-based details of a billing group. This API covers non-usage-based\nadjustments, such as Fees, Credits, Discounts, Tax, Upfront Fees, etc. If datetime range\nparameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadBillingGroupAdjustments",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1AdjustmentItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1AdjustmentItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are 'aws', 'azure', and 'gcp'.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The billing group id to stream.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: yyyymmdd."
                }
              },
              "description": "Request message for Cost.ReadBillingGroupAdjustments."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/billinggroups/{name}/costs:readBillingGroupCosts": {
      "post": {
        "summary": "Reads the usage-based cost details of a billing group. If datetime range\nparameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadBillingGroupCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are 'aws', 'azure', and 'gcp'.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The billing group id to stream.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: yyyymmdd."
                },
                "awsOptions": {
                  "$ref": "#/definitions/v1AwsOptions",
                  "description": "Optional. AWS-specific request options."
                }
              },
              "description": "Request message for Cost.ReadBillingGroupCosts."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/v1/{vendor}/costs:readCosts": {
      "post": {
        "summary": "Reads the usage-based cost details of an organization (Ripple) or company (Wave).\nIf datetime range parameters are not set, month-to-date (current month) will be returned.",
        "operationId": "Cost_ReadCosts",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CostItem"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1CostItem"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "vendor",
            "description": "Required. Valid values are 'aws', 'azure', and 'gcp'.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "startTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to start streaming data from. If not set, the first day of the\ncurrent month will be used. Format: yyyymmdd."
                },
                "endTime": {
                  "type": "string",
                  "description": "Optional. Timestamp to end the streaming data. If not set, current date will be used.\nFormat: yyyymmd."
                },
                "awsOptions": {
                  "$ref": "#/definitions/v1AwsOptions",
                  "description": "Optional. AWS-specific request options."
                }
              },
              "description": "Request message for Cost.ReadCosts."
            }
          }
        ],
        "tags": [
          "Cost"
        ]
      }
    },
    "/wave/v1/config": {
      "get": {
        "operationId": "GlobalConfig_StreamReadWaveConfig",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1StreamListConfigResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1StreamListConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "GlobalConfig"
        ]
      }
    }
  },
  "definitions": {
    "apiUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "User's unique name (or id)."
        },
        "parent": {
          "type": "string",
          "description": "The user's parent. If empty or non-existent, it means this user is a root user;\notherwise, it's a subuser."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The attributes (key/value pair) of the user. If hierarchy is supported, it will be\nseparated by '/', such as 'key/subkey=value'. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes."
        }
      }
    },
    "awsAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The AWS account id."
        },
        "name": {
          "type": "string",
          "description": "The account name."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The attributes (key/value pair) of the account. If hierarchy is supported, it will be\nseparated by '/', such as 'metakey/subkey=value'. Supported attributes include 'createTime'.\nIf the account is a master (or payer) account, additional attributes include 'bucketName',\n'lastModified' (last timestamp AWS updated CUR), 'prefix', 'reportName', 'roleArn', and\n'lastImported' (last timestamp CUR is imported to Alphaus)."
        }
      }
    },
    "awsAdjustment": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "billingGroupId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string"
        },
        "productCode": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "cost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "awsCost": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "billingGroupId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "productCode": {
          "type": "string"
        },
        "serviceCode": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "zone": {
          "type": "string"
        },
        "usageType": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "invoiceId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "costCategories": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "usage": {
          "type": "number",
          "format": "double"
        },
        "cost": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "operationsv1Operation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "$ref": "#/definitions/protobufAny",
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any."
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable."
        },
        "error": {
          "$ref": "#/definitions/rpcStatus",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "$ref": "#/definitions/protobufAny",
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`."
        }
      },
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rippleOrg": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name (or id) of the organization."
        },
        "email": {
          "type": "string",
          "description": "The registered email of the organization."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The metadata (key/value pair) of the organization. If hierarchy is supported, it will be\nseparated by '/', such as 'metakey/subkey=value'. See https://alphauslabs.github.io/blueapi/\nfor the list of supported attributes."
        }
      },
      "description": "Org resource definition."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1AdjustmentItem": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsAdjustment"
        }
      },
      "description": "Response message wrapper for cloud cost adjustments."
    },
    "v1AwsOptions": {
      "type": "object",
      "properties": {
        "includeTags": {
          "type": "boolean",
          "description": "Optional. If set to true, stream will include resource tags. Note that this could\npotentially increase the data size if you have lots of tag information."
        },
        "includeCostCategories": {
          "type": "boolean",
          "description": "Optional. If set to true, stream will include resource cost category information.\nNote that this could potentially increase the data size if you have lots of cost\ncategory information."
        }
      },
      "description": "AWS-specific options."
    },
    "v1Config": {
      "type": "object",
      "properties": {
        "featureId": {
          "type": "string",
          "description": "The feature name."
        },
        "featureName": {
          "type": "string",
          "description": "Required. The feature id."
        },
        "enabled": {
          "type": "boolean",
          "description": "The feature enabled or disabled.\nSet value to enable or disable the use of the feature."
        }
      },
      "description": "Response message for Config."
    },
    "v1CostItem": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/awsCost"
        }
      },
      "description": "Response message wrapper for cloud costs."
    },
    "v1CreateOrgRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "description": "Request message for Organization.CreateOrg rpc."
    },
    "v1CreateOrgResponse": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/rippleOrg"
        },
        "password": {
          "type": "string"
        }
      },
      "description": "Response message for Organization.CreateOrg rpc."
    },
    "v1ListMasterAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/awsAccount"
          }
        }
      },
      "description": "Response message for Organization.ListMasterAccounts rpc."
    },
    "v1ListOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/operationsv1Operation"
          },
          "description": "A list of operations that matches the specified filter in the request."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The standard List next-page token."
        }
      },
      "description": "The response message for Operations.ListOperations."
    },
    "v1ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUser"
          }
        }
      },
      "description": "Response message for Iam.ListUsers rpc."
    },
    "v1SendVerificationRequest": {
      "type": "object",
      "description": "Request message for Organization.SendVerification rpc."
    },
    "v1StreamListConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Config"
          },
          "title": "A list of global configs"
        }
      },
      "description": "Response message for GlobalConfig.Config."
    },
    "v1UpdateMetadataRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "description": "Request message for Organization.UpdateMetadata rpc."
    },
    "v1UpdatePasswordRequest": {
      "type": "object",
      "properties": {
        "oldPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      },
      "description": "Request message for Organization.UpdatePassword rpc."
    },
    "v1VerifyOrgRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "description": "Request message for Organization.VerifyOrg rpc."
    }
  },
  "externalDocs": {
    "description": "Our existing, non-Blue API documentation",
    "url": "https://docs.mobingi.com/v/api-reference/"
  }
}
